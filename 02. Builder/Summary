Problem dotyczy tworzenia obiektów, które posiadają wiele parametrów, które należy przypisać przy tworzeniu za pomocą konkstruktora.
1. Pierwszym wyjściem jest tworzenie statycznych fabryk, jednak to nie rozwiązuje problemu długich list argumentów;
2. Można to zniwelować używając konstruktorów teleskopowych, tzn. tworzymy szereg konstruktorów, gdzie najkrótszy zawiera wyłącznie wymagane parametry i odwołuje się do konstruktora o dłuższej liście argumentów przekazując jako następne opcjonalne pole 0 ( czy inną neutralna wartość). Jednak może to wymagać w dalszym ciągu dlugich list parametrów, kiedy istenieje wiele opcjonalnych argumentów, a potrzebujemy wypełnić tylko ostatni, wtedy we wszystkich musimy i tak wpisać 0.
3. Można wykorzystać wzorzec JavaBeans, gdzie przy pisaniu klasy ustaiamy parametry opcjonalne na wartości domyślne, a wymagane na null, bądź na -1 jeżeli powinny mieć wyłącznie dodatnie, a w dalszej części udostępnić wykorzystywanie mutatorów do zmieniania wartości. Jednak zwykle oznacza to wiele operacji zmian wartosci po kolei, gdzie w między czasie obiek jest niespójny, a co za tym idzie można użyć tego obiektu kiedy posiada w danej chwili złe informacje.
4. Najlepszym sposobem kiedy występuje wiele opcjonalnych argumentów jest stworzenie obiektu przy pomocy wzorca builder. W takim przypadku tworzymy klase statyczną wewnetrzna, która posiada konsktruktor z wymaganymi polami klasy zewnetrznej i szereg mutatorów do pól opcjonalnych, które w środku ustawiają wartosci tymaczasowe i zwracają 'this'. Po ustawieniu wszystkich argumentów wywołujemy metodę build, która wywołuj konstruktur klasy zewnętrznej, gdzie argumentem jest dany builder. Dodatkowo zapewnia to niezmienność obiektu stworzonego.